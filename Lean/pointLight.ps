cbuffer perFrame : register ( b0 )
{
	float4x4 viewProjInverted;
	float4x4 viewProj;
};

cbuffer perInstance : register ( b1 )
{
	float3 lightPos;
	float3 lightColor;
	float lightRadius;
	float lightIntensity;
};

Texture2D gBufferNormal : register ( t0 );
Texture2D gBufferDepth : register ( t1 );

SamplerState fullscreenQuadSampler;

struct PixelInput
{
	float4 pos : SV_Position;
	float4 screenCoord : ScreenCoord;
};

float4 PointLightPixelShader(PixelInput input) : SV_Target0
{
	input.screenCoord.xy /= input.screenCoord.w;

    float2 texCoord = 0.5f * (float2(input.screenCoord.x, - input.screenCoord.y) + 1);

    float4 normalData = gBufferNormal.Sample(fullscreenQuadSampler, texCoord);
    float3 normal = (2.0f * normalData.xyz) - 1.0f;

    float depth = gBufferDepth.Sample(fullscreenQuadSampler, texCoord).r;

    float4 pos;
    pos.xy = input.screenCoord.xy;
    pos.z = depth;
    pos.w = 1.0f;
    pos = mul(pos, viewProjInverted);
    pos /= pos.w;

    float3 lightVector = lightPos - pos;

    float attenuation = saturate(1.0f - length(lightVector) / lightRadius); 

    lightVector = normalize(lightVector); 

    float NdL = max(0, dot(normal, lightVector));
    float3 diffuseLight = NdL * lightColor.rgb;
	
	//return gBufferDepth.Sample(fullscreenQuadSampler, texCoord);
	//return normalData;
	//return float4(attenuation, attenuation, attenuation, 0.0f);

	/*float light = 1 - (length(lightVector) / lightRadius);
	diffuseLight.r = 1;
	diffuseLight.g = min(light * 1.5f, 1.0f);
	diffuseLight.b = saturate((light - 0.5f) * light * 2.0f + 1.0f);*/

	return attenuation * lightIntensity * float4(diffuseLight.rgb, 0.0f);
}